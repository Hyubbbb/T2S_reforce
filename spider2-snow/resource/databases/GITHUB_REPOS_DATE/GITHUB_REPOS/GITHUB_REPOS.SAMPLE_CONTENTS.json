{
    "table_name": "GITHUB_REPOS.SAMPLE_CONTENTS",
    "table_fullname": "GITHUB_REPOS_DATE.GITHUB_REPOS.SAMPLE_CONTENTS",
    "column_names": [
        "id",
        "sample_repo_name",
        "sample_mode",
        "sample_symlink_target",
        "size",
        "sample_path",
        "binary",
        "content",
        "copies",
        "sample_ref"
    ],
    "column_types": [
        "TEXT",
        "TEXT",
        "NUMBER",
        "TEXT",
        "NUMBER",
        "TEXT",
        "BOOLEAN",
        "TEXT",
        "NUMBER",
        "TEXT"
    ],
    "description": [
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null,
        null
    ],
    "sample_rows": [
        {
            "id": "e81a6755aac9e67653eb1310330ab9be1f20f8e8",
            "size": 7473,
            "content": null,
            "binary": true,
            "copies": 3,
            "sample_repo_name": "chrisdev/wagtail-cookiecutter-foundation",
            "sample_ref": "refs/heads/master",
            "sample_path": "{{cookiecutter.repo_name}}/pages/media/images/yeti.2e16d0ba.fill-70x70.png",
            "sample_mode": 33188,
            "sample_symlink_target": null
        },
        {
            "id": "2069c6505aeeff15d383dd743cd8fed885b678d0",
            "size": 1023,
            "content": "// This mixin stretches content to fill col__flex containers\n// Useful only if content is stacked horizontally and needs to fill the container\n@mixin stretch-content() {\n\t@include display(flex);\n\t@include align-items(stretch);\n\t.lt-ie10 & {\n\t\tdisplay: block;\n\t}\n}\n\n// Adds default padding for main application sections\n@mixin main-padding {\n\tpadding: {\n\t\ttop: 1em;\n\t\tbottom: 1em;\n\t\tleft: $site-margins;\n\t\tright: $site-margins;\n\t}\n}\n\n.row--main {\n\t@include main-padding();\n}\n\n.row {\n\t@include clearfix();\n\t@include flex-shrink(0);\n\twidth: 100%;\n\tposition: relative;\n}\n\n.row__left {\n\tfloat: left;\n}\n\n.row__right {\n\tfloat: right;\n}\n\n.row__center {\n\tmargin: {\n\t\tleft: auto;\n\t\tright: auto;\n\t}\n}\n\n.col {\n\t@include display(flex);\n\t@include flex-direction(column);\n\t@include justify-content(stretch);\n\t.lt-ie10 & {\n\t\tdisplay: block;\n\t}\n}\n\n.col__item {\n\t@include clearfix();\n\t@include flex-shrink(0);\n\n}\n\n.col__flex {\n\t@include flex(1);\n\tmin-height: 0; // FIX: allows flex-shrink/overflow:auto to work properly in nested flexboxes\n}",
            "binary": false,
            "copies": 3,
            "sample_repo_name": "chimecms/chime",
            "sample_ref": "refs/heads/master",
            "sample_path": "chime/static/sass/core/_layout.scss",
            "sample_mode": 33188,
            "sample_symlink_target": null
        },
        {
            "id": "727b8b65d0ef435f71ca3f455274337438eb6968",
            "size": 13312,
            "content": "\ufeffusing System.Threading.Tasks;\nusing Microsoft.CodeAnalysis.CodeRefactorings;\nusing Microsoft.CodeAnalysis.CSharp.CodeRefactorings.ConvertToInterpolatedString;\nusing Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.CodeRefactorings;\nusing Roslyn.Test.Utilities;\nusing Xunit;\n\nnamespace Microsoft.CodeAnalysis.Editor.CSharp.UnitTests.CodeActions.ConvertToInterpolatedString\n{\n    public class ConvertToInterpolatedStringTests : AbstractCSharpCodeActionTest\n    {\n        protected override CodeRefactoringProvider CreateCodeRefactoringProvider(Workspace workspace) =>\n            new ConvertToInterpolatedStringRefactoringProvider();\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestSingleItemSubstitution()\n        {\n            await TestAsync(\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = [|string.Format(\"\"{0}\"\", 1)|];\n    }\n    }\",\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = $\"\"{1}\"\";\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestItemOrdering()\n        {\n            await TestAsync(\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = [|string.Format(\"\"{0}{1}{2}\"\", 1, 2, 3)|];\n    }\n}\",\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = $\"\"{1}{2}{3}\"\";\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestItemOrdering2()\n        {\n            await TestAsync(\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = [|string.Format(\"\"{0}{2}{1}\"\", 1, 2, 3)|];\n    }\n}\",\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = $\"\"{1}{3}{2}\"\";\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestItemOrdering3()\n        {\n            await TestAsync(\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = [|string.Format(\"\"{0}{0}{0}\"\", 1, 2, 3)|];\n    }\n}\",\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = $\"\"{1}{1}{1}\"\";\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestItemOutsideRange()\n        {\n            await TestAsync(\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = [|string.Format(\"\"{4}{5}{6}\"\", 1, 2, 3)|];\n    }\n}\",\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = $\"\"{4}{5}{6}\"\";\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestItemDoNotHaveCast()\n        {\n            await TestAsync(\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = [|string.Format(\"\"{0}{1}{2}\"\", 0.5, \"\"Hello\"\", 3)|];\n    }\n}\",\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = $\"\"{0.5}{\"\"Hello\"\"}{3}\"\";\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestItemWithSyntaxErrorDoesHaveCast()\n        {\n            await TestAsync(\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = [|string.Format(\"\"{0}\"\", new object)|];\n    }\n}\",\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = $\"\"{ (object)new object}\"\";\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestItemWithoutSyntaxErrorDoesNotHaveCast()\n        {\n            await TestAsync(\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = [|string.Format(\"\"{0}\"\", new object())|];\n    }\n}\",\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = $\"\"{new object()}\"\";\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestParenthesisAddedForTernaryExpression()\n        {\n            await TestAsync(\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = [|string.Format(\"\"{0}\"\", true ? \"\"Yes\"\" : \"\"No\"\")|];\n    }\n}\",\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = $\"\"{(true ? \"\"Yes\"\" : \"\"No\"\")}\"\";\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestDoesNotAddDoubleParenthesisForTernaryExpression()\n        {\n            await TestAsync(\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = [|string.Format(\"\"{0}\"\", (true ? \"\"Yes\"\" : \"\"No\"\"))|];\n    }\n}\",\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = $\"\"{(true ? \"\"Yes\"\" : \"\"No\"\")}\"\";\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestMultiLineExpression()\n        {\n            await TestAsync(\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = [|string.Format(\n            \"\"{0}\"\", \n            true \n                ? \"\"Yes\"\"\n                : false as object)|];\n    }\n}\",\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = $\"\"{(true ? \"\"Yes\"\" : false as object)}\"\";\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestFormatSpecifiers()\n        {\n            await TestAsync(\n@\"using System;\nclass T\n{\n    void M()\n    {\n        Decimal pricePerOunce = 17.36m;\n        String s = [|String.Format(\"\"The current price is { 0:C2} per ounce.\"\",\n                                 pricePerOunce)|];\n    }\n}\",\n@\"using System;\nclass T\n{\n    void M()\n    {\n        Decimal pricePerOunce = 17.36m;\n        String s = $\"\"The current price is { pricePerOunce:C2} per ounce.\"\";\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestFormatSpecifiers2()\n        {\n            await TestAsync(\n@\"using System;\nclass T\n{\n    void M()\n    {\n        string s = [|String.Format(\"\"It is now {0:d} at {0:t}\"\", DateTime.Now)|];\n    }\n}\",\n@\"using System;\nclass T\n{\n    void M()\n    {\n        string s = $\"\"It is now {DateTime.Now:d} at {DateTime.Now:t}\"\";\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestFormatSpecifiers3()\n        {\n            await TestAsync(\n@\"using System;\nclass T\n{\n    void M()\n    {\n        int[] years = { 2013, 2014, 2015 };\n        int[] population = { 1025632, 1105967, 1148203 };\n        String s = String.Format(\"\"{0,6} {1,15}\\n\\n\"\", \"\"Year\"\", \"\"Population\"\");\n        for (int index = 0; index < years.Length; index++)\n            s += [|String.Format(\"\"{0,6} {1,15:N0}\\n\"\",\n                               years[index], population[index])|];\n    }\n}\",\n@\"using System;\nclass T\n{\n    void M()\n    {\n        int[] years = { 2013, 2014, 2015 };\n        int[] population = { 1025632, 1105967, 1148203 };\n        String s = String.Format(\"\"{0,6} {1,15}\\n\\n\"\", \"\"Year\"\", \"\"Population\"\");\n        for (int index = 0; index < years.Length; index++)\n            s += $\"\"{years[index],6} {population[index],15:N0}\\n\"\";\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestFormatSpecifiers4()\n        {\n            await TestAsync(\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = [|String.Format(\"\"{ 0,-10:C}\"\", 126347.89m)|];\n    }\n}\",\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = $\"\"{ 126347.89m,-10:C}\"\";\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestFormatSpecifiers5()\n        {\n            await TestAsync(\n@\"using System;\npublic class T\n{\n    public static void M()\n    {\n        Tuple<string, DateTime, int, DateTime, int>[] cities =\n            { Tuple.Create(\"\"Los Angeles\"\", new DateTime(1940, 1, 1), 1504277,\n                         new DateTime(1950, 1, 1), 1970358),\n            Tuple.Create(\"\"New York\"\", new DateTime(1940, 1, 1), 7454995,\n                         new DateTime(1950, 1, 1), 7891957),\n            Tuple.Create(\"\"Chicago\"\", new DateTime(1940, 1, 1), 3396808,\n                         new DateTime(1950, 1, 1), 3620962),\n            Tuple.Create(\"\"Detroit\"\", new DateTime(1940, 1, 1), 1623452,\n                         new DateTime(1950, 1, 1), 1849568) };\n        string output;\n        foreach (var city in cities)\n        {\n            output = [|String.Format(\"\"{0,-12}{1,8:yyyy}{2,12:N0}{3,8:yyyy}{4,12:N0}{5,14:P1}\"\",\n                                   city.Item1, city.Item2, city.Item3, city.Item4, city.Item5,\n                                   (city.Item5 - city.Item3) / (double)city.Item3)|];\n        }\n    }\n}\",\n@\"using System;\npublic class T\n{\n    public static void M()\n    {\n        Tuple<string, DateTime, int, DateTime, int>[] cities =\n            { Tuple.Create(\"\"Los Angeles\"\", new DateTime(1940, 1, 1), 1504277,\n                         new DateTime(1950, 1, 1), 1970358),\n            Tuple.Create(\"\"New York\"\", new DateTime(1940, 1, 1), 7454995,\n                         new DateTime(1950, 1, 1), 7891957),\n            Tuple.Create(\"\"Chicago\"\", new DateTime(1940, 1, 1), 3396808,\n                         new DateTime(1950, 1, 1), 3620962),\n            Tuple.Create(\"\"Detroit\"\", new DateTime(1940, 1, 1), 1623452,\n                         new DateTime(1950, 1, 1), 1849568) };\n        string output;\n        foreach (var city in cities)\n        {\n            output = $\"\"{city.Item1,-12}{city.Item2,8:yyyy}{city.Item3,12:N0}{city.Item4,8:yyyy}{city.Item5,12:N0}{(city.Item5 - city.Item3) / (double)city.Item3,14:P1}\"\";\n        }\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestFormatSpecifiers6()\n        {\n            await TestAsync(\n@\"using System;\npublic class T\n{\n    public static void M()\n    {\n        short[] values = { Int16.MinValue, -27, 0, 1042, Int16.MaxValue };\n        foreach (short value in values)\n        {\n            string formatString = [|String.Format(\"\"{0,10:G}: {0,10:X}\"\", value)|];\n        }\n    }\n}\",\n@\"using System;\npublic class T\n{\n    public static void M()\n    {\n        short[] values = { Int16.MinValue, -27, 0, 1042, Int16.MaxValue };\n        foreach (short value in values)\n        {\n            string formatString = $\"\"{value,10:G}: {value,10:X}\"\";\n        }\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestVerbatimStringLiteral()\n        {\n            await TestAsync(\n@\"using System;\n\npublic class T\n{\n    public static void M()\n    {\n        int value1 = 16932;\n        int value2 = 15421;\n        string result = [|string.Format(@\"\"\n    {0,10} ({0,8:X8})\nAnd {1,10} ({1,8:X8})\n  = {2,10} ({2,8:X8})\"\",\n                                      value1, value2, value1 & value2)|];\n    }\n}\",\n@\"using System;\n\npublic class T\n{\n    public static void M()\n    {\n        int value1 = 16932;\n        int value2 = 15421;\n        string result = $@\"\"\n    {value1,10} ({value1,8:X8})\nAnd {value2,10} ({value2,8:X8})\n  = {value1 & value2,10} ({value1 & value2,8:X8})\"\";\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestFormatWithParams()\n        {\n            await TestMissingAsync(\n@\"using System;\n\npublic class T\n{\n    public static void M()\n    {\n        DateTime date1 = new DateTime(2009, 7, 1);\n        TimeSpan hiTime = new TimeSpan(14, 17, 32);\n        decimal hiTemp = 62.1m;\n        TimeSpan loTime = new TimeSpan(3, 16, 10);\n        decimal loTemp = 54.8m;\n        \n         string result = [|String.Format(@\"\"Temperature on {0:d}:\n                                        {1,11}: {2} degrees (hi)\n                                        {3,11}: {4} degrees (lo)\"\",\n                                       new object[] { date1, hiTime, hiTemp, loTime, loTemp })|];\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestInvalidInteger()\n        {\n            await TestAsync(\n@\"using System;\n\npublic class T\n{\n    public static void M()\n    {\n        string result = [|String.Format(\"\"{0L}\"\", 5)|];\n    }\n}\",\n@\"using System;\n\npublic class T\n{\n    public static void M()\n    {\n        string result = $\"\"{5}\"\";\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestOutVariableDeclaration_01()\n        {\n            await TestMissingAsync(\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = [|string.Format(\"\"{0}\"\", out int x)|];\n    }\n}\");\n        }\n\n        [Fact, Trait(Traits.Feature, Traits.Features.CodeActionsConvertToInterpolatedString)]\n        public async Task TestOutVariableDeclaration_02()\n        {\n            await TestMissingAsync(\n@\"using System;\nclass T\n{\n    void M()\n    {\n        var a = [|string.Format(out string x, 1)|];\n    }\n}\");\n        }\n    }\n}\n",
            "binary": false,
            "copies": 3,
            "sample_repo_name": "dotnet/roslyn",
            "sample_ref": "refs/heads/master",
            "sample_path": "src/EditorFeatures/CSharpTest/CodeActions/ConvertToInterpolatedString/ConvertToInterpolatedStringTests.cs",
            "sample_mode": 33188,
            "sample_symlink_target": null
        },
        {
            "id": "44d05502c38dd0b5672513929e0c1a43fc4e0766",
            "size": 2963,
            "content": "\ufeff<Page x:Class=\"ArcGISRuntime.Samples.Store.Samples.EditAttachment\"\n\t  xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n\t  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n\t  xmlns:esri=\"using:Esri.ArcGISRuntime.Controls\"\n\t  xmlns:layers=\"using:Esri.ArcGISRuntime.Layers\"\n\t  xmlns:data=\"using:Esri.ArcGISRuntime.Data\">\n\t<Grid>\n\t\t<esri:MapView x:Name=\"MyMapView\"\n\t\t\t\t\t  MapViewTapped=\"MyMapView_MapViewTapped\">\n\t\t\t<esri:Map>\n\t\t\t\t<esri:Map.InitialViewpoint>\n\t\t\t\t\t<esri:ViewpointExtent XMin=\"-122.4406073721\"\n\t\t\t\t\t\t\t\t\t\t  YMin=\"37.7566097907\"\n\t\t\t\t\t\t\t\t\t\t  XMax=\"-122.4130971868\"\n\t\t\t\t\t\t\t\t\t\t  YMax=\"37.78197420877\"\n\t\t\t\t\t\t\t\t\t\t  SpatialReferenceID=\"4326\"/>\n\t\t\t\t</esri:Map.InitialViewpoint>\n\t\t\t\t<layers:ArcGISTiledMapServiceLayer ServiceUri=\"http://services.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer\" />\n\t\t\t\t\t <!-- Makes all features at current extent available for editing -->\n\t\t\t\t<layers:FeatureLayer ID=\"Incidents\">\n\t\t\t\t\t\t<data:ServiceFeatureTable ServiceUri=\"http://sampleserver6.arcgisonline.com/arcgis/rest/services/SF311/FeatureServer/0\" />\n\t\t\t\t\t</layers:FeatureLayer>\n\t\t\t\t</esri:Map>\n\t\t</esri:MapView>\n\t</Grid>\n\t<Page.BottomAppBar>\n\t\t<CommandBar IsOpen=\"True\"\n\t\t\t\t\tIsSticky=\"True\">\n\t\t\t<CommandBar.PrimaryCommands>\n\t\t\t\t<!-- Used for attachment editing -->\n\t\t\t\t<AppBarButton Icon=\"Add\"\n\t\t\t\t\t\t\t  IsEnabled=\"False\"\n\t\t\t\t\t\t\t  x:Name=\"AddButton\"\n\t\t\t\t\t\t\t  Label=\"Add\"\n\t\t\t\t\t\t\t  Click=\"AddButton_Click\" />\n\t\t\t\t<AppBarButton Icon=\"Edit\"\n\t\t\t\t\t\t\t  IsEnabled=\"False\"\n\t\t\t\t\t\t\t  x:Name=\"AttachmentsButton\"\n\t\t\t\t\t\t\t  Label=\"Edit\">\n\t\t\t\t\t<AppBarButton.Flyout>\n\t\t\t\t\t\t<Flyout>\n\t\t\t\t\t\t\t<ListBox x:Name=\"AttachmentList\"\n\t\t\t\t\t\t\t\t\t MaxHeight=\"200\"\n\t\t\t\t\t\t\t\t\t ScrollViewer.VerticalScrollBarVisibility=\"Auto\"\n\t\t\t\t\t\t\t\t\t ScrollViewer.HorizontalScrollBarVisibility=\"Auto\">\n\t\t\t\t\t\t\t\t<ListBox.ItemTemplate>\n\t\t\t\t\t\t\t\t\t<DataTemplate>\n\t\t\t\t\t\t\t\t\t\t<StackPanel Orientation=\"Horizontal\">\n\t\t\t\t\t\t\t\t\t\t\t<TextBlock Text=\"{Binding Name}\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t   VerticalAlignment=\"Center\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t   Width=\"80\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t   TextTrimming=\"WordEllipsis\" />\n\t\t\t\t\t\t\t\t\t\t\t<AppBarButton Icon=\"OpenFile\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Label=\"Open\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Click=\"OpenButton_Click\" />\n\t\t\t\t\t\t\t\t\t\t\t<AppBarButton Icon=\"Edit\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Label=\"Update\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Click=\"UpdateButton_Click\" />\n\t\t\t\t\t\t\t\t\t\t\t<AppBarButton Icon=\"Delete\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Label=\"Delete\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Click=\"DeleteButton_Click\" />\n\t\t\t\t\t\t\t\t\t\t</StackPanel>\n\t\t\t\t\t\t\t\t\t</DataTemplate>\n\t\t\t\t\t\t\t\t</ListBox.ItemTemplate>\n\t\t\t\t\t\t\t</ListBox>\n\t\t\t\t\t\t</Flyout>\n\t\t\t\t\t</AppBarButton.Flyout>\n\t\t\t\t</AppBarButton>\n\t\t\t</CommandBar.PrimaryCommands>\n\t\t\t<CommandBar.SecondaryCommands>\n\t\t\t\t<AppBarButton Icon=\"Important\"\n\t\t\t\t\t\t\t  Label=\"Info\">\n\t\t\t\t\t<AppBarButton.Flyout>\n\t\t\t\t\t\t<Flyout>\n\t\t\t\t\t\t\t<TextBlock Text=\"Tap on a feature to select and edit its attachments.\" />\n\t\t\t\t\t\t</Flyout>\n\t\t\t\t\t</AppBarButton.Flyout>\n\t\t\t\t</AppBarButton>              \n\t\t\t</CommandBar.SecondaryCommands>\n\t\t</CommandBar>\n\t</Page.BottomAppBar>\n</Page>\n",
            "binary": false,
            "copies": 3,
            "sample_repo_name": "Esri/arcgis-runtime-samples-dotnet",
            "sample_ref": "refs/heads/master",
            "sample_path": "src/Store/ArcGISRuntimeSamplesStore/Samples/Editing/EditAttachment.xaml",
            "sample_mode": 33188,
            "sample_symlink_target": null
        },
        {
            "id": "52a205499bd11db890e86936cd1d32c70ff0d566",
            "size": 1475,
            "content": "// == OldMaxTemperatureWithMapOutputCompression\npackage oldapi;\n\nimport java.io.IOException;\n\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.IntWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.io.compress.*;\nimport org.apache.hadoop.mapred.FileInputFormat;\nimport org.apache.hadoop.mapred.FileOutputFormat;\nimport org.apache.hadoop.mapred.JobClient;\nimport org.apache.hadoop.mapred.JobConf;\n\npublic class MaxTemperatureWithMapOutputCompression {\n\n  public static void main(String[] args) throws IOException {\n    if (args.length != 2) {\n      System.err.println(\"Usage: MaxTemperatureWithMapOutputCompression \" +\n      \t\t\"<input path> <output path>\");\n      System.exit(-1);\n    }\n    \n    JobConf conf = new JobConf(MaxTemperatureWithCompression.class);\n    conf.setJobName(\"Max temperature with map output compression\");\n\n    FileInputFormat.addInputPath(conf, new Path(args[0]));\n    FileOutputFormat.setOutputPath(conf, new Path(args[1]));\n    \n    conf.setOutputKeyClass(Text.class);\n    conf.setOutputValueClass(IntWritable.class);\n    \n    // vv OldMaxTemperatureWithMapOutputCompression\n    conf.setCompressMapOutput(true);\n    conf.setMapOutputCompressorClass(GzipCodec.class);\n    // ^^ OldMaxTemperatureWithMapOutputCompression\n\n    conf.setMapperClass(MaxTemperatureMapper.class);\n    conf.setCombinerClass(MaxTemperatureReducer.class);\n    conf.setReducerClass(MaxTemperatureReducer.class);\n\n    JobClient.runJob(conf);\n  }\n\n}\n",
            "binary": false,
            "copies": 3,
            "sample_repo_name": "burakbayramli/kod",
            "sample_ref": "refs/heads/master",
            "sample_path": "books/hadoop_definitive/ch04/src/main/java/oldapi/MaxTemperatureWithMapOutputCompression.java",
            "sample_mode": 33188,
            "sample_symlink_target": null
        }
    ]
}